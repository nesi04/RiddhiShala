
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phoneNumber: 'phoneNumber',
  password: 'password',
  roleId: 'roleId',
  joinDate: 'joinDate',
  lastActive: 'lastActive',
  isDisabled: 'isDisabled',
  isVerified: 'isVerified',
  address: 'address',
  bio: 'bio',
  district: 'district'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  revoked: 'revoked',
  replacedByToken: 'replacedByToken'
};

exports.Prisma.UserSchoolScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  schoolId: 'schoolId'
};

exports.Prisma.SchoolScalarFieldEnum = {
  id: 'id',
  name: 'name',
  status: 'status',
  established: 'established',
  upgradedYear: 'upgradedYear',
  udiseCode: 'udiseCode',
  district: 'district',
  block: 'block',
  cluster: 'cluster',
  village: 'village',
  management: 'management',
  type: 'type',
  medium: 'medium',
  inclusive: 'inclusive',
  vocationalTrades: 'vocationalTrades',
  coed: 'coed',
  totalArea: 'totalArea',
  principal: 'principal',
  principalSince: 'principalSince',
  principalQualification: 'principalQualification',
  principalProfessionalQualification: 'principalProfessionalQualification',
  principalJoiningDate: 'principalJoiningDate',
  principalExperience: 'principalExperience',
  principalContact: 'principalContact',
  principalEmail: 'principalEmail',
  midDayMeal: 'midDayMeal',
  drinkingWater: 'drinkingWater',
  electricity: 'electricity',
  internet: 'internet',
  fireSafety: 'fireSafety',
  teacherPhotosDisplayed: 'teacherPhotosDisplayed'
};

exports.Prisma.EnrollmentScalarFieldEnum = {
  id: 'id',
  schoolId: 'schoolId',
  class: 'class',
  boys: 'boys',
  girls: 'girls',
  total: 'total',
  cwsn: 'cwsn',
  remarks: 'remarks'
};

exports.Prisma.TeacherScalarFieldEnum = {
  id: 'id',
  schoolId: 'schoolId',
  name: 'name',
  gender: 'gender',
  mobile: 'mobile',
  qualification: 'qualification',
  section: 'section',
  classes: 'classes',
  subjects: 'subjects',
  iecTraining: 'iecTraining',
  experience: 'experience'
};

exports.Prisma.InfrastructureScalarFieldEnum = {
  id: 'id',
  schoolId: 'schoolId',
  facility: 'facility',
  quantity: 'quantity',
  status: 'status',
  remarks: 'remarks'
};

exports.Prisma.LabScalarFieldEnum = {
  id: 'id',
  schoolId: 'schoolId',
  type: 'type',
  available: 'available',
  equipment: 'equipment',
  remarks: 'remarks'
};

exports.Prisma.PillarScalarFieldEnum = {
  id: 'id',
  schoolId: 'schoolId',
  number: 'number',
  title: 'title',
  subAspect: 'subAspect',
  observations: 'observations',
  remarks: 'remarks'
};

exports.Prisma.InnovationScalarFieldEnum = {
  id: 'id',
  schoolId: 'schoolId',
  type: 'type',
  description: 'description',
  mediaUrl: 'mediaUrl'
};

exports.Prisma.ChallengeScalarFieldEnum = {
  id: 'id',
  schoolId: 'schoolId',
  area: 'area',
  challenge: 'challenge',
  supportNeeded: 'supportNeeded'
};

exports.Prisma.OtpScalarFieldEnum = {
  id: 'id',
  email: 'email',
  otp: 'otp',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Role: 'Role',
  Permission: 'Permission',
  User: 'User',
  RefreshToken: 'RefreshToken',
  UserSchool: 'UserSchool',
  School: 'School',
  Enrollment: 'Enrollment',
  Teacher: 'Teacher',
  Infrastructure: 'Infrastructure',
  Lab: 'Lab',
  Pillar: 'Pillar',
  Innovation: 'Innovation',
  Challenge: 'Challenge',
  Otp: 'Otp'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
