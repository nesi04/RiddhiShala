
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phoneNumber: 'phoneNumber',
  password: 'password',
  roleId: 'roleId',
  joinDate: 'joinDate',
  lastActive: 'lastActive',
  isDisabled: 'isDisabled',
  address: 'address',
  bio: 'bio',
  district: 'district'
};

exports.Prisma.UserSchoolScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  schoolId: 'schoolId'
};

exports.Prisma.SchoolScalarFieldEnum = {
  id: 'id',
  name: 'name',
  yearOfEstablishment: 'yearOfEstablishment',
  upgradedTo: 'upgradedTo',
  udiseCode: 'udiseCode',
  district: 'district',
  block: 'block',
  cluster: 'cluster',
  villageTown: 'villageTown',
  management: 'management',
  schoolType: 'schoolType',
  mediumOfInstruction: 'mediumOfInstruction',
  inclusiveSchool: 'inclusiveSchool',
  vocationalTrades: 'vocationalTrades',
  coEducation: 'coEducation',
  totalArea: 'totalArea',
  campusType: 'campusType',
  campusSize: 'campusSize'
};

exports.Prisma.HeadOfSchoolScalarFieldEnum = {
  id: 'id',
  schoolId: 'schoolId',
  name: 'name',
  designation: 'designation',
  holdingChargeSince: 'holdingChargeSince',
  academicQualification: 'academicQualification',
  professionalQualification: 'professionalQualification',
  dateOfJoining: 'dateOfJoining',
  teachingExperience: 'teachingExperience',
  contactNumber: 'contactNumber',
  email: 'email'
};

exports.Prisma.TeacherScalarFieldEnum = {
  id: 'id',
  schoolId: 'schoolId',
  name: 'name',
  gender: 'gender',
  subject: 'subject',
  qualification: 'qualification',
  experience: 'experience',
  contactNumber: 'contactNumber',
  email: 'email',
  classesTaking: 'classesTaking',
  attendedIECTraining: 'attendedIECTraining'
};

exports.Prisma.StudentScalarFieldEnum = {
  id: 'id',
  schoolId: 'schoolId',
  name: 'name',
  gender: 'gender',
  grade: 'grade',
  section: 'section',
  dob: 'dob',
  contactNumber: 'contactNumber',
  email: 'email',
  cwsn: 'cwsn'
};

exports.Prisma.DataEntryOperatorScalarFieldEnum = {
  id: 'id',
  schoolId: 'schoolId',
  name: 'name',
  contactNumber: 'contactNumber',
  email: 'email'
};

exports.Prisma.InfrastructureScalarFieldEnum = {
  id: 'id',
  schoolId: 'schoolId',
  facility: 'facility',
  quantity: 'quantity',
  status: 'status',
  remarks: 'remarks',
  photoUrl: 'photoUrl'
};

exports.Prisma.LabScalarFieldEnum = {
  id: 'id',
  schoolId: 'schoolId',
  labType: 'labType',
  available: 'available',
  equipment: 'equipment',
  remarks: 'remarks',
  photoUrl: 'photoUrl'
};

exports.Prisma.PMShriPillarScalarFieldEnum = {
  id: 'id',
  schoolId: 'schoolId',
  pillar: 'pillar',
  subAspect: 'subAspect',
  observations: 'observations',
  remarks: 'remarks',
  photoUrl: 'photoUrl'
};

exports.Prisma.InnovationScalarFieldEnum = {
  id: 'id',
  schoolId: 'schoolId',
  type: 'type',
  description: 'description',
  photoUrl: 'photoUrl'
};

exports.Prisma.ChallengeScalarFieldEnum = {
  id: 'id',
  schoolId: 'schoolId',
  area: 'area',
  challenge: 'challenge',
  supportNeeded: 'supportNeeded'
};

exports.Prisma.OtpVerificationScalarFieldEnum = {
  id: 'id',
  email: 'email',
  phone: 'phone',
  roleId: 'roleId',
  otp: 'otp',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Role: 'Role',
  Permission: 'Permission',
  User: 'User',
  UserSchool: 'UserSchool',
  School: 'School',
  HeadOfSchool: 'HeadOfSchool',
  Teacher: 'Teacher',
  Student: 'Student',
  DataEntryOperator: 'DataEntryOperator',
  Infrastructure: 'Infrastructure',
  Lab: 'Lab',
  PMShriPillar: 'PMShriPillar',
  Innovation: 'Innovation',
  Challenge: 'Challenge',
  OtpVerification: 'OtpVerification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
