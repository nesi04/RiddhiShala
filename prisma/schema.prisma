generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------------- Roles & Permissions ----------------------

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  users       User[]
  permissions Permission[] @relation("RolePermissions")

  @@map("roles")
}

model Permission {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  users       User[]       @relation("UserPermissions")
  roles       Role[]       @relation("RolePermissions")

  @@map("permissions")
}

// ---------------------- Users ----------------------

model User {
  id              Int             @id @default(autoincrement())
  name            String
  email           String          @unique
  phoneNumber     String?         @unique
  password        String          // hashed password
  roleId          Int
  role            Role            @relation(fields: [roleId], references: [id])
  permissions     Permission[]    @relation("UserPermissions")
  joinDate        DateTime        @default(now())
  lastActive      DateTime?
  isDisabled      Boolean         @default(false)
  isVerified      Boolean         @default(false)   // ðŸ‘ˆ needed by AuthService
  assignedSchools UserSchool[]
  address         String?
  bio             String?
  district        String?

  // Relation with refresh tokens
  refreshTokens   RefreshToken[]

  @@map("users")
}

// ---------------------- Refresh Tokens ----------------------

model RefreshToken {
  id              Int      @id @default(autoincrement())
  token           String   @unique
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  expiresAt       DateTime
  revoked         Boolean  @default(false)
  replacedByToken String?

  @@map("refresh_tokens")
}

// ---------------------- User â†” School (Many-to-Many) ----------------------

model UserSchool {
  id       Int    @id @default(autoincrement())
  userId   Int
  schoolId Int
  user     User   @relation(fields: [userId], references: [id])
  school   School @relation(fields: [schoolId], references: [id])
  @@unique([userId, schoolId], name: "userId_schoolId")
}

// ---------------------- Schools ----------------------

model School {
  id                     Int            @id @default(autoincrement())
  name                   String
  status                 String         @default("Active") // Active/Inactive
  established            Int?           // Year of establishment
  upgradedYear           String?        // Year upgraded to current level
  udiseCode              String?        @unique
  district               String?
  block                  String?
  cluster                String?
  village                String?        // Village/Town
  management             String?        // School management type
  type                   String?        // School type
  medium                 String?        // Medium of instruction
  inclusive              Boolean?       @default(false) // Facilities for CWSN
  vocationalTrades       String[]       // Available vocational courses
  coed                   Boolean?       @default(true) // Co-education status
  totalArea              String?        // School campus size
  principal              String?        // Head of School name
  principalSince         String?        // Holding charge since
  principalQualification String?        // Academic qualification
  principalProfessionalQualification String? // Professional qualification
  principalJoiningDate   String?        // Date of joining
  principalExperience    String?        // Teaching experience
  principalContact       String?        // Contact number
  principalEmail         String?        // Email ID
  midDayMeal             String?        // MDM status
  drinkingWater          String?        // Water facility
  electricity            String?        // Electricity status
  internet               String?        // Internet availability
  fireSafety             String?        // Fire safety measures
  teacherPhotosDisplayed Boolean?       @default(false) // Whether teacher photos are displayed
  
  // Relations
  enrollments          Enrollment[]
  teachers             Teacher[]
  infrastructures      Infrastructure[]
  labs                 Lab[]
  pillars              Pillar[]
  innovations          Innovation[]
  challenges           Challenge[]
  assignedUsers        UserSchool[]

  @@map("schools")
  @@unique([name, district], name: "name_district")
}

// ---------------------- Enrollment Data ----------------------

model Enrollment {
  id        Int     @id @default(autoincrement())
  schoolId  Int
  school    School  @relation(fields: [schoolId], references: [id])
  class     String  // Class/Grade level
  boys      Int?
  girls     Int?
  total     Int?
  cwsn      Int?    // Children with Special Needs count
  remarks   String?

  @@map("enrollments")
}

// ---------------------- Teachers ----------------------

model Teacher {
  id                  Int      @id @default(autoincrement())
  schoolId            Int
  school              School   @relation(fields: [schoolId], references: [id])
  name                String
  gender              String?
  mobile              String?  // Contact number
  qualification       String?
  section             String?  // LP & Primary/Upper-Primary/etc
  classes             String?  // Classes they teach
  subjects            String?  // Subjects they teach
  iecTraining         String?  // IEC training status
  experience          String?  // Teaching experience

  @@map("teachers")
}

// ---------------------- Infrastructure ----------------------

model Infrastructure {
  id        Int     @id @default(autoincrement())
  schoolId  Int
  school    School  @relation(fields: [schoolId], references: [id])
  facility  String  // Type of facility
  quantity  Int?    // Number available
  status    String? // Condition/status
  remarks   String?

  @@map("infrastructures")
}

// ---------------------- Lab Facilities ----------------------

model Lab {
  id        Int     @id @default(autoincrement())
  schoolId  Int
  school    School  @relation(fields: [schoolId], references: [id])
  type      String  // Lab type (Science, Computer, etc)
  available Boolean @default(false)
  equipment String? // Available equipment
  remarks   String?

  @@map("labs")
}

// ---------------------- PM SHRI Pillars ----------------------

model Pillar {
  id           Int     @id @default(autoincrement())
  schoolId     Int
  school       School  @relation(fields: [schoolId], references: [id])
  number       Int     // Pillar number (1-6)
  title        String  // Pillar title
  subAspect    String  // Specific aspect
  observations String? // Findings
  remarks      String? // Additional notes

  @@map("pillars")
}

// ---------------------- Innovations & Achievements ----------------------

model Innovation {
  id          Int     @id @default(autoincrement())
  schoolId    Int
  school      School  @relation(fields: [schoolId], references: [id])
  type        String  // Teaching/Community/Award
  description String  // Details
  mediaUrl    String? // Supporting documents/photos

  @@map("innovations")
}

// ---------------------- Challenges ----------------------

model Challenge {
  id            Int     @id @default(autoincrement())
  schoolId      Int
  school        School  @relation(fields: [schoolId], references: [id])
  area          String  // Area of challenge
  challenge     String  // Description
  supportNeeded String? // Required support

  @@map("challenges")
}

// ---------------------- OTP Verification ----------------------

model Otp {
  id        Int      @id @default(autoincrement())
  email     String
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("otps")
}