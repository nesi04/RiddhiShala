generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------------- Roles & Permissions ----------------------

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  users       User[]
  permissions Permission[] @relation("RolePermissions")

  @@map("roles")
}

model Permission {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  users       User[]       @relation("UserPermissions")
  roles       Role[]       @relation("RolePermissions")

  @@map("permissions")
}

// ---------------------- Users ----------------------

model User {
  id              Int          @id @default(autoincrement())
  name            String
  email           String       @unique
  phoneNumber     String       @unique
  password        String       // hashed password
  roleId          Int
  role            Role         @relation(fields: [roleId], references: [id])
  permissions     Permission[] @relation("UserPermissions")
  joinDate        DateTime     @default(now())
  lastActive      DateTime?
  isDisabled      Boolean      @default(false)
  assignedSchools UserSchool[]
  address         String?
  bio             String?
  district        String?

  @@map("users")
  


}

// ---------------------- User â†” School (Many-to-Many) ----------------------

model UserSchool {
  id       Int    @id @default(autoincrement())
  userId   Int
  schoolId Int
  user     User   @relation(fields: [userId], references: [id])
  school   School @relation(fields: [schoolId], references: [id])
  @@unique([userId, schoolId], name: "userId_schoolId")
}

// ---------------------- Schools ----------------------

model School {
  id                    Int            @id @default(autoincrement())
  name                  String
  yearOfEstablishment   Int?
  upgradedTo            String?
  udiseCode             String?
  district              String?
  block                 String?
  cluster               String?
  villageTown           String?
  management            String?
  schoolType            String?
  mediumOfInstruction   String?
  inclusiveSchool       Boolean        @default(false)
  vocationalTrades      String?
  coEducation           Boolean?
  totalArea             String?
  campusType            String?
  campusSize            String?

  // Role-specific relations
  headOfSchool          HeadOfSchool?
  teachers              Teacher[]
  students              Student[]
  dataEntryOperators    DataEntryOperator[]

  // Infrastructure & Labs
  infrastructures       Infrastructure[]
  labs                  Lab[]

  // PM-SHRI Pillars
  pmShriPillars         PMShriPillar[]

  // Innovations, Achievements, Challenges
  innovations           Innovation[]
  challenges            Challenge[]

  assignedUsers         UserSchool[]

  @@map("schools")
  @@unique([name, district], name: "name_district")
}

// ---------------------- Role-Specific Models ----------------------

model HeadOfSchool {
  id                        Int       @id @default(autoincrement())
  schoolId                  Int       @unique
  school                    School    @relation(fields: [schoolId], references: [id])
  name                      String
  designation               String?
  holdingChargeSince        String?
  academicQualification     String?
  professionalQualification String?
  dateOfJoining             DateTime?
  teachingExperience        String?
  contactNumber             String?
  email                     String?

  @@map("head_of_school")
}

model Teacher {
  id                  Int      @id @default(autoincrement())
  schoolId            Int
  school              School   @relation(fields: [schoolId], references: [id])
  name                String
  gender              String?
  subject             String?
  qualification       String?
  experience          String?
  contactNumber       String?
  email               String?
  classesTaking       String?
  attendedIECTraining Boolean?

  @@map("teachers")
}

model Student {
  id            Int      @id @default(autoincrement())
  schoolId      Int
  school        School   @relation(fields: [schoolId], references: [id])
  name          String
  gender        String?
  grade         String?
  section       String?
  dob           DateTime?
  contactNumber String?
  email         String?
  cwsn          Boolean?

  @@map("students")
}

model DataEntryOperator {
  id            Int      @id @default(autoincrement())
  schoolId      Int
  school        School   @relation(fields: [schoolId], references: [id])
  name          String
  contactNumber String?
  email         String?

  @@map("data_entry_operators")
}

// ---------------------- Infrastructure & Labs ----------------------

model Infrastructure {
  id        Int     @id @default(autoincrement())
  schoolId  Int
  school    School  @relation(fields: [schoolId], references: [id])
  facility  String
  quantity  Int?
  status    String?
  remarks   String?
  photoUrl  String?
}

model Lab {
  id        Int     @id @default(autoincrement())
  schoolId  Int
  school    School  @relation(fields: [schoolId], references: [id])
  labType   String
  available Boolean
  equipment String?
  remarks   String?
  photoUrl  String?
}

// ---------------------- PM-SHRI Pillars ----------------------

model PMShriPillar {
  id           Int     @id @default(autoincrement())
  schoolId     Int
  school       School  @relation(fields: [schoolId], references: [id])
  pillar       String
  subAspect    String
  observations String?
  remarks      String?
  photoUrl     String?
}

// ---------------------- Innovations & Achievements ----------------------

model Innovation {
  id          Int     @id @default(autoincrement())
  schoolId    Int
  school      School  @relation(fields: [schoolId], references: [id])
  type        String  // Teaching innovation / Community knowledge / Award
  description String
  photoUrl    String?
}

// ---------------------- Challenges & Support ----------------------

model Challenge {
  id            Int     @id @default(autoincrement())
  schoolId      Int
  school        School  @relation(fields: [schoolId], references: [id])
  area          String
  challenge     String
  supportNeeded String?
}
model OtpVerification {
  id        Int      @id @default(autoincrement())
  email     String?
  phone     String?
  roleId    Int
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
}
